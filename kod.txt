using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Security.Policy;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Hotcakes.CommerceDTO.v1;
using Hotcakes.CommerceDTO.v1.Catalog;
using Hotcakes.CommerceDTO.v1.Client;
using Hotcakes.CommerceDTO.v1.Contacts;
using Hotcakes.CommerceDTO.v1.Orders;
using Newtonsoft.Json;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace Kliensalkalmazás
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            GetProducts();
            foreach (DataGridViewColumn column in ordersDataGridView.Columns)
            {
                column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
        }

        private void ModifyPriceButton_Click(object sender, EventArgs e)
        {
            string url = "http://20.234.113.211:8095/";
            string key = "";

            Api proxy = new Api(url, key);

            int rowIndex = ordersDataGridView.CurrentCell.RowIndex;

            if (!decimal.TryParse(ModifyTextBox.Text, out decimal value) || value == 0)
            {
                MessageBox.Show("Kérjük adjon meg egy 0-nál nagyobb számot.");
                return;
            }
            GetProducts();
         
        }
        public void GetProducts()
        {
            string url = "http://20.234.113.211:8086";
            string key = "";
            Api proxy = new Api(url, key);

            ApiResponse<List<ProductDTO>> response = proxy.ProductsFindAll();
            string json = JsonConvert.SerializeObject(response);

            ApiResponse<List<ProductDTO>> deserializedResponse = JsonConvert.DeserializeObject<ApiResponse<List<ProductDTO>>>(json);

            DataTable dt = new DataTable();
            dt.Columns.Add("Id", typeof(int));
            dt.Columns.Add("bvin", typeof(string));
            dt.Columns.Add("ProductName", typeof(string));
            dt.Columns.Add("Price", typeof(int));

            foreach (ProductDTO item in deserializedResponse.Content)
            {
                dt.Rows.Add(item.StoreId, item.Bvin, item.ProductName, item.SitePrice);
            }

            ordersDataGridView.DataSource = dt;
        }

        private void DeleteButton_Click(object sender, EventArgs e)
        {
            string url = "http://20.234.113.211:8086";
            string key = "";

            Api proxy = new Api(url, key);

            // specify the order to delete
            int rowIndex = ordersDataGridView.CurrentCell.RowIndex;
            int columnIndex = ordersDataGridView.CurrentCell.ColumnIndex;

            var orderId = ordersDataGridView[columnIndex, rowIndex].Value.ToString();

            // call the API to delete the order
            ApiResponse<bool> response = proxy.OrdersDelete(orderId);

            GetOrders();
        }
    }
}